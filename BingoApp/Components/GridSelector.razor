@using Microsoft.JSInterop
@using System.Diagnostics
@using BingoApp.Services
@using BingoApp.Models

@inject SelectionModeService SelectionModeService

@if (IsSelecting)
{
    <div class="grid-overlay">
        <div class="grid-container @(IsAnimating ? "animating" : "") @(IsFinalizing ? "finalizing" : "")" 
             style="--theme-color: @ThemeColor; --grid-columns: @columns; --grid-rows: @rows; --item-size: @(itemSize)px; --item-width: @(itemWidth)px; --item-height: @(itemHeight)px">
            @foreach (var item in Items)
            {
                <div class="grid-item @(item == SelectedItem ? "selected" : "") @(HighlightedItem == item ? "highlighted" : "")">
                    <span>@item</span>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsSelecting { get; set; }

    [Parameter]
    public string ThemeColor { get; set; } = "var(--primary-color)";

    [Parameter]
    public List<string> Items { get; set; } = new();

    [Parameter]
    public EventCallback<string> OnItemSelected { get; set; }

    private bool IsAnimating;
    private bool IsFinalizing;
    private string? SelectedItem;
    private string? HighlightedItem;
    private Random random = new();
    private CancellationTokenSource? animationCts;
    
    // Grid layout properties
    private int columns = 4;
    private int rows = 3;
    private int itemSize = 120;
    private int itemWidth = 120;
    private int itemHeight = 120;
    
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
    
    private class GridLayoutResult
    {
        public int columns { get; set; }
        public int rows { get; set; }
        public int itemSize { get; set; }
        public int itemWidth { get; set; }
        public int itemHeight { get; set; }
    }

    private DotNetObjectReference<GridSelector>? dotNetRef;

    protected override Task OnInitializedAsync()
    {
        // Create a reference to this component instance for JS interop
        dotNetRef = DotNetObjectReference.Create(this);
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsSelecting && Items.Count > 0)
        {
            await CalculateGridLayoutAsync();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsSelecting)
        {
            // Register for window resize events
            await JSRuntime.InvokeVoidAsync("GridHelper.setupResizeListener", dotNetRef);
        }
    }
    
    [JSInvokable]
    public async Task HandleWindowResize()
    {
        if (IsSelecting && Items.Count > 0)
        {
            await CalculateGridLayoutAsync();
            StateHasChanged();
        }
    }
    
    private async Task CalculateGridLayoutAsync()
    {
        try
        {
            // Call JavaScript to calculate optimal grid based on viewport
            // Use minimum item size of 80px for better visibility and touch targets
            var result = await JSRuntime.InvokeAsync<GridLayoutResult>("GridHelper.calculateGrid", Items.Count, 80);
            
            // Update grid layout properties
            columns = result.columns;
            rows = result.rows;
            itemSize = result.itemSize;
            itemWidth = result.itemWidth > 0 ? result.itemWidth : result.itemSize;
            itemHeight = result.itemHeight > 0 ? result.itemHeight : result.itemSize;
        }
        catch (Exception)
        {
            // Fallback to default calculation if JS interop fails
            var sqrt = Math.Sqrt(Items.Count);
            columns = Math.Max(2, (int)Math.Ceiling(sqrt * 0.7)); // Use fewer columns for larger items
            rows = (int)Math.Ceiling((double)Items.Count / columns);
            itemSize = 100; // Larger default item size
            itemWidth = 120;
            itemHeight = 100;
        }
    }

    public async Task StartSelectionAsync()
    {
        try
        {
            // Recalculate grid layout first
            await CalculateGridLayoutAsync();
            
            IsAnimating = true;
            IsFinalizing = false;
            SelectedItem = null;
            
            // Cancel any existing animation
            animationCts?.Cancel();
            animationCts = new CancellationTokenSource();
            var token = animationCts.Token;

            var selectionMode = await SelectionModeService.GetSelectionModeAsync();

            string? selectedItem = null;
            
            switch (selectionMode)
            {
                case ItemSelectionMode.Random:
                    selectedItem = await AnimateRandomSelectionAsync(token);
                    break;

                case ItemSelectionMode.Horizontal:
                    selectedItem = await AnimateHorizontalSelectionAsync(token);
                    break;

                case ItemSelectionMode.Vertical:
                    selectedItem = await AnimateVerticalSelectionAsync(token);
                    break;
            }

            if (!token.IsCancellationRequested && selectedItem != null)
            {
                SelectedItem = selectedItem;
                HighlightedItem = selectedItem;
                IsFinalizing = true;
                StateHasChanged();

                // Hold the selection for a moment
                await Task.Delay(3500, token);

                // Notify parent of selection
                if (OnItemSelected.HasDelegate)
                {
                    await OnItemSelected.InvokeAsync(selectedItem);
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Animation was cancelled
        }
        finally
        {
            IsAnimating = false;
            animationCts?.Dispose();
            animationCts = null;
        }
    }

    private async Task<string?> AnimateRandomSelectionAsync(CancellationToken token)
    {
        if (Items.Count == 0)
            return null;
            
        // Randomize the number of iterations for each phase with increased counts
        int fastPhaseCount = random.Next(15, 25);    // More initial fast selections
        int mediumPhaseCount = random.Next(10, 15);  // More medium-speed selections
        int slowPhaseCount = random.Next(5, 8);      // More dramatic slow selections

        // Fast phase - slightly slower than before
        for (int i = 0; i < fastPhaseCount && !token.IsCancellationRequested; i++)
        {
            HighlightedItem = Items[random.Next(Items.Count)];
            StateHasChanged();
            await Task.Delay(150, token); // Increased from 100ms
        }

        // Medium phase - more pronounced slowdown
        for (int i = 0; i < mediumPhaseCount && !token.IsCancellationRequested; i++)
        {
            HighlightedItem = Items[random.Next(Items.Count)];
            StateHasChanged();
            await Task.Delay(300 + (i * 60), token); // Increased base delay and increment
        }

        // Slow phase - even more dramatic pauses
        for (int i = 0; i < slowPhaseCount && !token.IsCancellationRequested; i++)
        {
            HighlightedItem = Items[random.Next(Items.Count)];
            StateHasChanged();
            await Task.Delay(600 + (i * 150), token); // Increased base delay and increment
        }
        
        // Return the last highlighted item as the selection
        return HighlightedItem;
    }

    private async Task<string?> AnimateHorizontalSelectionAsync(CancellationToken token)
    {
        if (Items.Count == 0)
            return null;
            
        // Random number of iterations between 50-120
        int totalIterations = random.Next(50, 121);
        
        // Calculate timings to fit approximately in 6 seconds
        int initialDelay = 100;  // milliseconds per step at the start
        int finalDelay = 500;   // much longer final delay to emphasize the stopping point
        
        // Start from a random row
        int currentRow = random.Next(rows);
        int currentCol = 0;
        
        // Track the number of iterations completed
        int iterationCount = 0;
        string? lastHighlightedItem = null;
        
        // Speed up phase
        int speedUpIterations = (int)(totalIterations * 0.3); // First 30% speeds up
        // Constant speed phase
        int constantSpeedIterations = (int)(totalIterations * 0.4); // Next 40% maintains speed
        // Slow down phase
        int slowDownIterations = totalIterations - speedUpIterations - constantSpeedIterations; // Last 30% slows down
        
        int currentDelay = initialDelay;
        
        // Keep animating until we reach the desired number of iterations
        while (iterationCount < totalIterations && !token.IsCancellationRequested)
        {
            // Calculate index and highlight the item if it exists
            int index = currentRow * columns + currentCol;
            if (index < Items.Count)
            {
                lastHighlightedItem = Items[index];
                HighlightedItem = lastHighlightedItem;
                StateHasChanged();
                
                // Calculate current delay based on which phase we're in
                if (iterationCount < speedUpIterations)
                {
                    // Speed up phase - gradually decrease delay
                    double progress = (double)iterationCount / speedUpIterations;
                    currentDelay = (int)(initialDelay - (initialDelay * 0.5 * progress));
                }
                else if (iterationCount < speedUpIterations + constantSpeedIterations)
                {
                    // Constant speed phase - maintain minimum delay
                    currentDelay = (int)(initialDelay * 0.5);
                }
                else
                {
                    // Slow down phase - gradually increase delay
                    double progress = (double)(iterationCount - speedUpIterations - constantSpeedIterations) / slowDownIterations;
                    currentDelay = (int)((initialDelay * 0.5) + (finalDelay - (initialDelay * 0.5)) * Math.Pow(progress, 2));
                }
                
                await Task.Delay(currentDelay, token);
            }
            
            // Move to the next column
            currentCol++;
            
            // If we've reached the end of a row, move to the next row
            if (currentCol >= columns)
            {
                currentCol = 0;
                currentRow = (currentRow + 1) % rows; // Wrap around to the first row when we reach the end
            }
            
            iterationCount++;
        }
        
        // Return the last highlighted item as the selection
        return lastHighlightedItem;
    }

    private async Task<string?> AnimateVerticalSelectionAsync(CancellationToken token)
    {
        if (Items.Count == 0)
            return null;
            
        // Random number of iterations between 50-120
        int totalIterations = random.Next(50, 121);
        
        // Calculate timings to fit approximately in 6 seconds
        int initialDelay = 100;  // milliseconds per step at the start
        int finalDelay = 500;   // much longer final delay to emphasize the stopping point
        
        // Start from a random column
        int currentCol = random.Next(columns);
        int currentRow = 0;
        
        // Track the number of iterations completed
        int iterationCount = 0;
        string? lastHighlightedItem = null;
        
        // Speed up phase
        int speedUpIterations = (int)(totalIterations * 0.3); // First 30% speeds up
        // Constant speed phase
        int constantSpeedIterations = (int)(totalIterations * 0.4); // Next 40% maintains speed
        // Slow down phase
        int slowDownIterations = totalIterations - speedUpIterations - constantSpeedIterations; // Last 30% slows down
        
        int currentDelay = initialDelay;
        
        // Keep animating until we reach the desired number of iterations
        while (iterationCount < totalIterations && !token.IsCancellationRequested)
        {
            // Calculate index and highlight the item if it exists
            int index = currentRow * columns + currentCol;
            if (index < Items.Count)
            {
                lastHighlightedItem = Items[index];
                HighlightedItem = lastHighlightedItem;
                StateHasChanged();
                
                // Calculate current delay based on which phase we're in
                if (iterationCount < speedUpIterations)
                {
                    // Speed up phase - gradually decrease delay
                    double progress = (double)iterationCount / speedUpIterations;
                    currentDelay = (int)(initialDelay - (initialDelay * 0.5 * progress));
                }
                else if (iterationCount < speedUpIterations + constantSpeedIterations)
                {
                    // Constant speed phase - maintain minimum delay
                    currentDelay = (int)(initialDelay * 0.5);
                }
                else
                {
                    // Slow down phase - gradually increase delay
                    double progress = (double)(iterationCount - speedUpIterations - constantSpeedIterations) / slowDownIterations;
                    currentDelay = (int)((initialDelay * 0.5) + (finalDelay - (initialDelay * 0.5)) * Math.Pow(progress, 2));
                }
                
                await Task.Delay(currentDelay, token);
            }
            
            // Move to the next row
            currentRow++;
            
            // If we've reached the end of a column, move to the next column
            if (currentRow >= rows)
            {
                currentRow = 0;
                currentCol = (currentCol + 1) % columns; // Wrap around to the first column when we reach the end
            }
            
            iterationCount++;
        }
        
        // Return the last highlighted item as the selection
        return lastHighlightedItem;
    }

    public void Dispose()
    {
        animationCts?.Cancel();
        animationCts?.Dispose();
        
        // Remove resize event listener
        if (dotNetRef != null)
        {
            try
            {
                JSRuntime.InvokeVoidAsync("GridHelper.removeResizeListener", dotNetRef);
            }
            catch
            {
                // Silently handle errors during cleanup
            }
        }
        
        // Dispose of the .NET reference to prevent memory leaks
        dotNetRef?.Dispose();
        dotNetRef = null;
    }
}
