@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BingoApp.Services
@implements IDisposable
@inject NavigationManager NavigationManager
@inject NavbarService NavbarService

<nav class="navbar navbar-expand-lg">
    <div class="container">
        <a class="navbar-brand" href="">
            <div class="brand-content">
                <span class="brand-icon">🎯</span>
                <span class="brand-text">Bingo-o-matic</span>
            </div>
        </a>        
        <button class="navbar-toggler" 
                type="button" 
                aria-controls="navbarContent" 
                aria-expanded="@(!IsNavMenuCollapsed)" 
                aria-label="Toggle navigation"
                @onclick="async () => await HandleToggleNavMenuAsync()">
            <span class="navbar-toggler-icon"></span>
        </button>        <div class="collapse navbar-collapse @(IsNavMenuCollapsed ? "" : "show")" id="navbarContent">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link @(GetActiveClass("standard-bingo"))" href="standard-bingo">
                        <span class="nav-text">Standard</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(GetActiveClass("custom-bingo"))" href="custom-bingo">
                        <span class="nav-text">Custom</span>
                    </a>
                </li>
            </ul>

            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link @(GetActiveClass("settings"))" href="settings">
                        <span class="nav-text">Settings</span>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool IsNavMenuCollapsed { get; set; } = true;

    private string GetActiveClass(string route)
    {
        var currentRoute = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return currentRoute.Equals(route, StringComparison.OrdinalIgnoreCase) ? "active" : string.Empty;
    }

    private async Task HandleToggleNavMenuAsync()
    {
        IsNavMenuCollapsed = !IsNavMenuCollapsed;
        await NavbarService.ToggleNavbarAsync();
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Collapse menu when navigating to a new page
        IsNavMenuCollapsed = true;
        
        try
        {
            // Close the navbar using Bootstrap's JavaScript
            await NavbarService.CloseNavbarAsync();
        }
        catch
        {
            // Ignore errors if Bootstrap JS isn't loaded yet
        }
        
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}
