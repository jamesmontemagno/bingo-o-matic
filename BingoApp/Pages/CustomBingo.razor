@page "/custom-bingo"
@using Microsoft.AspNetCore.Components
@using System.Web
@using Microsoft.AspNetCore.Components.Web
@using BingoApp.Models
@using BingoApp.Services
@using BingoApp.Helpers
@using BingoApp.Components
@implements IAsyncDisposable

@inject BingoSetService BingoService
@inject NavigationManager NavigationManager
@inject ILocalBrowserStorageService LocalStorageService
@inject IGameStateService GameStateService
@inject IJSRuntime JSRuntime

<div class="bingo-container">
    <div class="bingo-header">
        <div class="bingo-controls">
            <div class="draw-toggle-row d-flex flex-column flex-md-row align-items-center gap-3 mt-2">
                <button class="btn btn-primary btn-lg flex-shrink-0" @onclick="SelectNext" disabled="@(selectedSet == null || isSelecting)">
                    <i class="bi bi-shuffle"></i> Draw Item
                </button>
                @if (calledItems.Count > 0)
                {
                    <button class="btn btn-success btn-lg flex-shrink-0 bingo-button" 
                            @onclick="CelebrateBingo"
                            disabled="@(isSelecting || showConfetti)">
                        <i class="bi bi-trophy"></i> Bingo!
                    </button>
                }
                @if (!isMobileDevice)
                {
                    <div class="mode-toggle @((selectedSet == null || isSelecting) ? "disabled" : "")" role="group" aria-label="Selection mode">
                        <button type="button" 
                                class="mode-toggle-btn @(selectionMode == SelectionMode.Cards ? "active" : "")" 
                                @onclick="() => SetMode(SelectionMode.Cards)"
                                disabled="@isSelecting"
                                aria-pressed="@(selectionMode == SelectionMode.Cards)">
                            <i class="bi bi-list-ul"></i>
                            <span>Cards</span>
                        </button>
                        <button type="button" 
                                class="mode-toggle-btn @(selectionMode == SelectionMode.Wheel ? "active" : "")" 
                                @onclick="() => SetMode(SelectionMode.Wheel)"
                                disabled="@isSelecting"
                                aria-pressed="@(selectionMode == SelectionMode.Wheel)">
                            <i class="bi bi-palette"></i>
                            <span>Wheel</span>
                        </button>
                        <button type="button" 
                                class="mode-toggle-btn @(selectionMode == SelectionMode.Grid ? "active" : "")" 
                                @onclick="() => SetMode(SelectionMode.Grid)"
                                disabled="@isSelecting"
                                aria-pressed="@(selectionMode == SelectionMode.Grid)">
                            <i class="bi bi-grid-3x3-gap"></i>
                            <span>Grid</span>
                        </button>
                    </div>
                }

                @if ((selectedSet == null || calledItems.Count == 0) && !isSelecting)
                {
                    <div class="selector-row flex-grow-1">
                        <div class="form-group">
                            <select class="form-select" id="bingoSet" @bind="pendingSetName" @bind:after="OnBingoSetSelectionChanged"  disabled="@(isSelecting)">
                                <option value="">Select a set...</option>
                                @foreach (var set in bingoSets)
                                {
                                    <option value="@set.Name">@set.Name</option>
                                }
                            </select>
                        </div>
                        <a href="/custom-bingo/manage" class="btn btn-outline-secondary manage-btn" title="Manage Bingo Sets" aria-label="Manage Bingo Sets">
                            <i class="bi bi-gear"></i>
                            <span class="visually-hidden">Manage</span>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (selectedSet != null)
    {
        <div class="game-content">
            @if (isSelecting)
            {
                @if (selectionMode == SelectionMode.Wheel)
                {
                    <div class="wheel-overlay">
                        <div class="wheel-container @(isWheelSlowingDown ? "slowing-down" : "")">
                        <div class="wheel" style="transform: rotate(@(wheelRotation)deg)">
                            @foreach (var (item, index) in availableItems.Select((value, i) => (value, i)))
                            {
                                var segmentAngle = 360.0 / availableItems.Count;
                                var startAngle = segmentAngle * index;
                                var endAngle = segmentAngle * (index + 1);
                                
                                // Add small overlap to eliminate gaps between segments
                                // Use larger overlap for fewer segments to prevent gaps
                                var overlapAngle = availableItems.Count <= 5 ? 2.0 : 0.5; // Larger overlap for fewer segments
                                var adjustedStartAngle = startAngle - overlapAngle;
                                var adjustedEndAngle = endAngle + overlapAngle;
                                
                                var textAngle = startAngle + (segmentAngle / 2); // Center text in segment
                                var (translateX, translateY) = GetDynamicTextPosition();
                                var clipPath = $"polygon(50% 50%, {50 + 50 * Math.Cos((adjustedStartAngle - 90) * Math.PI / 180)}% {50 + 50 * Math.Sin((adjustedStartAngle - 90) * Math.PI / 180)}%, {50 + 50 * Math.Cos((adjustedEndAngle - 90) * Math.PI / 180)}% {50 + 50 * Math.Sin((adjustedEndAngle - 90) * Math.PI / 180)}%)";
                                <div class="wheel-segment" style="background-color: @(GetWheelSegmentColor(index)); clip-path: @clipPath">
                                </div>
                                <span class="wheel-text" style="transform: rotate(@(textAngle)deg) translateX(@(translateX)px) translateY(@(translateY)%); font-size: @GetDynamicFontSize();">@item</span>

                            }
                        </div>
                            <div class="wheel-pointer"></div>
                        </div>
                    </div>
                }
                else if (selectionMode == SelectionMode.Grid)
                {
                    <GridSelector 
                        IsSelecting="true"
                        Items="@availableItems"
                        ThemeColor="@currentThemeColor"
                        @ref="gridSelector"
                        OnItemSelected="OnGridItemSelected" />
                }
                else
                {
                    <div class="current-item selecting @(isAnimating ? "animate" : "")" aria-live="polite">
                        <div class="item-display @(isSelected ? "selected" : "idle")" style="background-color: @currentThemeColor">
                            <span class="item">@(displayItem ?? "Ready to draw...")</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="current-item @(isSelecting ? "selecting" : "") @(isAnimating ? "animate" : "")" aria-live="polite">
                    <div class="item-display @(isSelected ? "selected" : "idle")" style="background-color: @currentThemeColor">
                        <span class="item">@(displayItem ?? "Ready to draw...")</span>
                    </div>
                </div>
            }

            <div class="called-items">
                <h4>Called Items</h4>
                <div class="called-items-grid">
                    @if (calledItems.Count > 0)
                    {
                        @foreach (var item in calledItems.AsEnumerable().Reverse())
                        {
                            bool isLatestItem = calledItems.IndexOf(item) == calledItems.Count - 1;
                            <div class="item-cell called @(isLatestItem ? "latest" : "previous")" style="@(isLatestItem ? $"background-color: {currentThemeColor}" : $"border-color: {currentThemeColor}")">
                                <span>@item</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No items selected yet. Click "Draw Item" to begin.</p>
                    }
                </div>
            </div>
            <div class="reset-btn-row mt-3 d-flex justify-content-center">
                <button class="btn btn-outline-primary" @onclick="ConfirmNewGame" disabled="@(selectedSet == null || isSelecting)">
                    <i class="bi bi-arrow-repeat"></i> Reset Game
                </button>
            </div>
            
        </div>
    }
</div>

@* Confirmation Dialog *@
@if (showConfirmDialog)
{
    <div class="modal-backdrop show"></div>
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@confirmTitle</h5>
                    <button type="button" class="btn-close" @onclick="CancelConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p>@confirmMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelConfirmation">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmAction">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}

<Confetti Show="@showConfetti" />

<ResumeGameDialog 
    Show="@showResumeDialog" 
    GameType="Custom Bingo" 
    GameDetails="@resumeGameDetails"
    OnResult="OnResumeDialogResult" />

@code {
    private enum SelectionMode
    {
        Cards,
        Wheel,
        Grid
    }

    private SelectionMode selectionMode = SelectionMode.Cards;
    private GridSelector? gridSelector;

    private string selectedSetName = "";
    private string pendingSetName = "";
    private List<BingoSet> bingoSets = new();
    private BingoSet? selectedSet;
    private bool isSelecting = false;
    private bool isSelected = false;
    
    // Bingo board state
    private List<string> availableItems = new List<string>();
    private List<string> calledItems = new List<string>();
    private Random random = new Random();
    private string? currentItem;
    private string? displayItem;
    private bool isAnimating = false;
    private CancellationTokenSource? animationCts;
    private string currentThemeColor = "";
    private readonly string[] darkColors = new[]
    {
        "#1E40AF", // Deep Blue
        "#065F46", // Forest Green
        "#831843", // Dark Pink
        "#3730A3", // Indigo
        "#7E22CE", // Purple
        "#9D174D", // Raspberry
        "#B45309", // Burnt Orange
        "#064E3B", // Dark Emerald
        "#134E4A", // Dark Teal
        "#450A0A", // Dark Red
        "#2563EB", // Medium Blue
        "#0891B2", // Cyan
        "#4338CA", // Medium Indigo
        "#7C3AED", // Medium Purple
        "#C026D3", // Medium Pink
        "#E11D48", // Medium Red
        "#EA580C", // Medium Orange
        "#65A30D", // Medium Green
        "#0D9488", // Medium Teal
        "#6D28D9", // Medium Violet
        "#BE185D", // Medium Magenta
        "#92400E", // Brown
        "#166534", // Medium Forest
        "#075985"  // Ocean Blue
    };

    private string GetWheelSegmentColor(int index)
    {
        return WheelHelpers.GetWheelSegmentColor(index, availableItems.Count);
    }

    private string GetDynamicFontSize()
    {
        return WheelHelpers.GetDynamicFontSize(availableItems);
    }

    private (double translateX, double translateY) GetDynamicTextPosition()
    {
        return WheelHelpers.GetDynamicTextPosition(availableItems);
    }

    /// <summary>
    /// Shuffles a list in place using the Fisher-Yates algorithm
    /// </summary>
    private void ShuffleList<T>(List<T> list)
    {
        for (int i = list.Count - 1; i > 0; i--)
        {
            int j = random.Next(0, i + 1);
            (list[i], list[j]) = (list[j], list[i]);
        }
    }

    // Confirmation dialog state
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private Func<Task>? confirmAction;    // Wheel state

    private double wheelRotation = 0;
    private bool isWheelSlowingDown = false;
    private bool isMobileDevice;
    private IJSObjectReference? module;    // Confetti state
    private bool showConfetti;
    private CancellationTokenSource? confettiCts;

    // Resume dialog state
    private bool showResumeDialog = false;
    private string resumeGameDetails = "";
    private CustomBingoGameState? pendingGameState;

    protected override async Task OnInitializedAsync()
    {
        // Import device detector module
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/deviceDetector.js");
        
        // Detect if device is mobile
        isMobileDevice = await module.InvokeAsync<bool>("DeviceDetector.isMobileDevice");
        
        // Force cards mode on mobile
        if (isMobileDevice)
        {
            selectionMode = SelectionMode.Cards;
        }
        
        // Subscribe to changes
        BingoService.OnSetsChanged += OnBingoSetsChanged;
        
        // Load preferences
        if (!isMobileDevice)
        {
            await LoadModePreferenceAsync();
        }
        
        
        // Load all bingo sets
        await LoadBingoSetsAsync();
          // Check for saved game first
        var savedGame = await GameStateService.LoadCustomGameStateAsync();
        bool hasResumedGame = false;
        
        if (savedGame != null)
        {
            // Show the custom dialog instead of the basic JavaScript confirm
            pendingGameState = savedGame;
            resumeGameDetails = GameStateService.GetCustomGameDetails(savedGame);
            showResumeDialog = true;
            StateHasChanged();
            return; // Wait for user response
        }
        
        // Only check query string if we didn't resume a saved game
        if (!hasResumedGame)
        {
            // Check if there's a set name in the query string
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = HttpUtility.ParseQueryString(uri.Query);
            var setName = query["set"];
            if (!string.IsNullOrEmpty(setName))
            {
                selectedSetName = setName;
                pendingSetName = setName;
                await LoadSelectedSetAsync();
            }
        }
    }
    
    private async Task LoadBingoSetsAsync()
    {
        bingoSets = (await BingoService.GetAllAsync()).ToList();
    }
    
    private void OnBingoSetsChanged()
    {
        InvokeAsync(async () => 
        {
            await LoadBingoSetsAsync();
            StateHasChanged();
        });
    }


    private void OnBingoSetSelectionChanged()
    {
        if (pendingSetName != selectedSetName && 
            selectedSet != null && 
            calledItems.Count > 0)
        {
            // Game in progress, confirm the change
            confirmTitle = "Change Bingo Set";
            confirmMessage = $"You're about to switch to a new bingo set. This will reset the current game. Are you sure?";
            showConfirmDialog = true;
            confirmAction = async () =>
            {
                selectedSetName = pendingSetName;
                await LoadSelectedSetAsync();
            };
        }
        else
        {
            // No game in progress or no change, just load
            selectedSetName = pendingSetName;
            _ = LoadSelectedSetAsync();
        }
    }

    private async Task LoadSelectedSetAsync()
    {
        if (!string.IsNullOrEmpty(selectedSetName))
        {
            selectedSet = await BingoService.GetByNameAsync(selectedSetName);
            if (selectedSet != null)
            {
                ResetGame();
            }
        }
        else
        {
            selectedSet = null;
        }
    }
    
    // Keep the synchronous version for backward compatibility
    private void LoadSelectedSet()
    {
        if (!string.IsNullOrEmpty(selectedSetName))
        {
            selectedSet = BingoService.GetByName(selectedSetName);
            if (selectedSet != null)
            {
                ResetGame();
            }
        }
        else
        {
            selectedSet = null;
        }
    }

    private void ResetGame()
    {
        // Cancel any ongoing animations first
        animationCts?.Cancel();
        if (animationCts != null)
        {
            animationCts.Dispose();
            animationCts = null;
        }

        if (selectedSet?.Items?.Length > 0)
        {
            availableItems = new List<string>(selectedSet.Items.Distinct(StringComparer.OrdinalIgnoreCase).ToArray());
            calledItems.Clear();
            currentItem = null;
            displayItem = null;
            isSelecting = false;
            isSelected = false;
            isAnimating = false;
            // Assign a new random color theme
            string previousColor = currentThemeColor;
            string newColor;
            do
            {
                newColor = darkColors[random.Next(darkColors.Length)];
            } while (darkColors.Length > 1 && newColor == previousColor);
            currentThemeColor = newColor;
            wheelRotation = 0;
            
            // Clear any saved game state
            _ = GameStateService.ClearCustomGameStateAsync();
            
            StateHasChanged();
        }
    }

    private void ConfirmNewGame()
    {
        if (calledItems.Count > 0)
        {
            confirmTitle = "Confirm New Game";
            confirmMessage = "Are you sure you want to start a new game? This will reset the current game.";
            showConfirmDialog = true;
            confirmAction = () =>
            {
                NewGame();
                return Task.CompletedTask;
            };
        }
        else
        {
            // No game in progress, just reset
            NewGame();
        }
    }

    private void NewGame()
    {
        ResetGame();
    }

    private void CancelConfirmation()
    {
        showConfirmDialog = false;
        pendingSetName = selectedSetName; // Reset pending selection if canceled
        StateHasChanged();
    }

    private async Task ConfirmAction()
    {
        showConfirmDialog = false;
        if (confirmAction != null)
        {
            await confirmAction.Invoke();
            confirmAction = null;
        }
    }

    private async Task SelectNext()
    {
        if (availableItems.Count == 0 || isSelecting)
        {
            return;
        }

        try
        {
            isSelecting = true;
            isSelected = false;
            
            // Shuffle the available items before selection
            ShuffleList(availableItems);
            
            StateHasChanged();
            
            if (selectionMode == SelectionMode.Wheel)
            {
                await Task.Delay(1000);
                // Select the final item first
                int randomIndex = random.Next(0, availableItems.Count);
                currentItem = availableItems[randomIndex];
                
                // Calculate the final rotation to make the selected item land at the pointer
                double segmentAngle = 360.0 / availableItems.Count;
                double itemAngle = segmentAngle * randomIndex;
                
                // Since the coordinate system in the wheel rendering has 0 degrees at the right side
                // (notice the -90 in the clipPath calculation) and the pointer is also at the right,
                // we need to align the center of the item's segment with the 0-degree mark
                
                // Center of the item's segment
                double itemCenterAngle = itemAngle + (segmentAngle / 2);
                // Fixed number of rotations (5-8) for visual effect plus the alignment angle
                double targetRotation = (random.Next(5, 8) * 360) + (360 - itemCenterAngle);
                
                // Fix the rotation to ensure it's within proper range
                targetRotation = targetRotation % 360 == 0 ? targetRotation + 1 : targetRotation;
                  // Start the wheel spinning animation
                wheelRotation = 0;
                isWheelSlowingDown = false;
                StateHasChanged();
                
                // Trigger the animation by setting the final rotation
                await Task.Delay(50); // Small delay to ensure the initial state is rendered
                wheelRotation = targetRotation;
                StateHasChanged();
                
                // Main spin (3.0 seconds)
                await Task.Delay(3000);
                
                // Subtle slowing down phase (0.3 seconds)
                isWheelSlowingDown = true;
                StateHasChanged();
                await Task.Delay(300);
                
                // Update game state
                availableItems.RemoveAt(randomIndex);
                calledItems.Add(currentItem);
                displayItem = currentItem;
                
                // Auto-save game state after item selection
                await GameStateService.SaveCustomGameStateAsync(calledItems, availableItems, selectedSet?.Name, currentItem);
                
                // Keep the final state visible (2 seconds)
                await Task.Delay(2000);
                
                // Reset effects
                isWheelSlowingDown = false;
                StateHasChanged();
                
                // Reset wheel position
                wheelRotation = 0;
                StateHasChanged();
            }
            else if (selectionMode == SelectionMode.Grid)
            {
                await Task.Delay(1000);
                if (gridSelector != null)
                {
                    await gridSelector.StartSelectionAsync();
                }
            }
            else
            {
                // Original card-based selection animation
                displayItem = availableItems[random.Next(availableItems.Count)];
                currentItem = null;
                isAnimating = true;
                StateHasChanged();

                // Cancel any existing animation
                animationCts?.Cancel();
                animationCts = new CancellationTokenSource();
                var token = animationCts.Token;

                // Fast cycling at the beginning
                // Randomize the number of rotations for each phase
                var fastRotations = random.Next(12, 20);
                for (int i = 0; i < fastRotations && !token.IsCancellationRequested; i++)
                {
                    displayItem = availableItems[random.Next(availableItems.Count)];
                    StateHasChanged();
                    await Task.Delay(60, token);
                }

                var mediumRotations = random.Next(8, 14);
                for (int i = 0; i < mediumRotations && !token.IsCancellationRequested; i++)
                {
                    displayItem = availableItems[random.Next(availableItems.Count)];
                    StateHasChanged();
                    await Task.Delay(160, token);
                }

                var slowRotations = random.Next(5, 10);
                for (int i = 0; i < slowRotations && !token.IsCancellationRequested; i++)
                {
                    displayItem = availableItems[random.Next(availableItems.Count)];
                    StateHasChanged();
                    await Task.Delay(250, token);
                }

                if (!token.IsCancellationRequested)
                {
                    // Select the final item
                    int randomIndex = random.Next(0, availableItems.Count);
                    currentItem = availableItems[randomIndex];
                    displayItem = currentItem;
                    availableItems.RemoveAt(randomIndex);
                    calledItems.Add(currentItem);
                    
                    // Auto-save game state after item selection
                    await GameStateService.SaveCustomGameStateAsync(calledItems, availableItems, selectedSet?.Name, currentItem);
                }
            }

            // Show final selection
            isSelecting = false;
            isSelected = true;
            isAnimating = false;
            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            // Animation was cancelled
        }
        finally
        {
            isSelecting = false;
            if (animationCts != null)
            {
                animationCts.Dispose();
                animationCts = null;
            }
        }
    }

    private async Task ToggleItem(string item)
    {
        if (calledItems.Contains(item))
        {
            calledItems.Remove(item);
            availableItems.Add(item);
        }
        else
        {
            calledItems.Add(item);
            availableItems.Remove(item);
        }
        
        // Auto-save after manual item toggle
        await GameStateService.SaveCustomGameStateAsync(calledItems, availableItems, selectedSet?.Name, currentItem);
        
        StateHasChanged();
    }

    private async Task OnGridItemSelected(string item)
    {
        if (availableItems.Contains(item))
        {
            currentItem = item;
            displayItem = item;
            availableItems.Remove(item);
            calledItems.Add(item);
            isSelecting = false;
            isSelected = true;
            
            // Auto-save game state after grid selection
            await GameStateService.SaveCustomGameStateAsync(calledItems, availableItems, selectedSet?.Name, currentItem);
            
            StateHasChanged();
        }
    }

    private async Task SetMode(SelectionMode mode)
    {
        if (selectionMode != mode && !isMobileDevice)
        {
            selectionMode = mode;
            await SaveModePreferenceAsync();
        }
    }

    private const string ModePreferenceKey = "bingo_selection_mode";
    
    private async Task LoadModePreferenceAsync()
    {
        try
        {
            var savedMode = await LocalStorageService.GetItemAsync<string>(ModePreferenceKey);
            if (!string.IsNullOrEmpty(savedMode) && Enum.TryParse<SelectionMode>(savedMode, out var mode))
            {
                selectionMode = mode;
            }
        }
        catch
        {
            // If loading fails, keep default
            selectionMode = SelectionMode.Cards;
        }
    }
    
    private async Task SaveModePreferenceAsync()
    {
        try
        {
            await LocalStorageService.SetItemAsync(ModePreferenceKey, selectionMode.ToString());
        }
        catch
        {
            // Silently fail if saving doesn't work
        }
    }

    private async Task CelebrateBingo()
    {
        // Cancel any existing confetti animation
        confettiCts?.Cancel();
        confettiCts?.Dispose();
        confettiCts = new CancellationTokenSource();

        try
        {
            showConfetti = true;
            StateHasChanged();

            // Keep confetti showing for 10 seconds
            await Task.Delay(10000, confettiCts.Token);
        }
        catch (OperationCanceledException)
        {
            // Animation was cancelled
        }
        finally
        {
            showConfetti = false;
            StateHasChanged();
        }
    }

    private async Task RestoreGameStateAsync(CustomBingoGameState gameState)
    {
        // Restore basic state
        calledItems = gameState.CalledItems.ToList();
        availableItems = gameState.AvailableItems.ToList();
        selectedSetName = gameState.SelectedSetName ?? "";
        pendingSetName = selectedSetName;
        currentItem = gameState.CurrentItem;
        displayItem = currentItem;
        
        // Load the selected set
        if (!string.IsNullOrEmpty(selectedSetName))
        {
            await LoadSelectedSetAsync();
            
            // Override the reset that LoadSelectedSetAsync does
            calledItems = gameState.CalledItems.ToList();
            availableItems = gameState.AvailableItems.ToList();
            currentItem = gameState.CurrentItem;
            displayItem = currentItem;
            isSelected = currentItem != null;        }
        
        StateHasChanged();
    }

    private async Task OnResumeDialogResult(bool shouldResume)
    {
        showResumeDialog = false;
        StateHasChanged();

        if (shouldResume && pendingGameState != null)
        {
            await RestoreGameStateAsync(pendingGameState);
        }
        else
        {
            // Clear the saved game and continue normal initialization
            await GameStateService.ClearCustomGameStateAsync();
            
            // Continue with normal initialization (query string check)
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = HttpUtility.ParseQueryString(uri.Query);
            var setName = query["set"];
            if (!string.IsNullOrEmpty(setName))
            {
                selectedSetName = setName;
                pendingSetName = setName;
                await LoadSelectedSetAsync();
            }
        }
        
        pendingGameState = null;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        { 
            // Clean up any resources when the component is disposed
            BingoService.OnSetsChanged -= OnBingoSetsChanged;
            animationCts?.Cancel();
            animationCts?.Dispose();
            animationCts = null;

            confettiCts?.Cancel();
            confettiCts?.Dispose();
            confettiCts = null;

            if (module is not null)
            {
                await module.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error during disposal: {ex.Message}");
        }
       
    }
}
